(setq ROOMS 
  '((LIVING-ROOM        (NORTH FRONT-STAIRS)
                        (SOUTH DINING-ROOM)
                        (EAST KITCHEN))
    (UPSTAIRS-BEDROOM   (WEST LIBRARY)
                        (SOUTH FRONT-STAIRS))
    (DINING-ROOM        (NORTH LIVING-ROOM)
                        (EAST PANTRY)
                        (WEST DOWNSTAIRS-BEDROOM))
    (KITCHEN            (WEST LIVING-ROOM)
                        (SOUTH PANTRY))
    (PANTRY             (NORTH KITCHEN)
                        (WEST DINING-ROOM))
    (DOWNSTAIRS-BEDROOM (NORTH BACK-STAIRS)
                        (EAST DINING-ROOM))
    (BACK-STAIRS        (SOUTH DOWNSTAIRS-BEDROOM)
                        (NORTH LIBRARY))
    (FRONT-STAIRS       (NORTH UPSTAIRS-BEDROOM)
                        (SOUTH LIVING-ROOM))
    (LIBRARY            (EAST UPSTAIRS-BEDROOM)
                        (SOUTH BACK-STAIRS)))
)

(defun searchfor (temp x)
    (setq mtemp (car temp))
    (if (equal nil mtemp)
        (list 'NO 'SUCH 'ROOM)
        (if (equal (car mtemp) x)
            (cdr mtemp)
            (searchfor (cdr temp) x)
        )
    )
)

(defun choices (x)
    (searchfor rooms x)
)

(defun setLocation (x)
    (setq loc x)
)

(defun count-for (mlist mcount)
    (if (equal nil mlist)
        mcount
        (count-for (cdr mlist) mcount)
    )
)

(defun how-many-choices ()
    (setq mtemp (choices(loc)))
    (setq mcount 0)
    
)

(defun look (dir loc)
    (setq mtemp (choices loc))
    (if (listp mtemp)
        (searchfor mtemp dir)
        (list 'POOR 'FORMAT)
    )
)
    